import os
import sys
import subprocess
import shutil
from pathlib import Path

def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} - —É—Å–ø–µ—à–Ω–æ!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ {description}:")
        print(f"   {e.stderr}")
        return False

def create_requirements():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ requirements.txt"""
    requirements = """numpy>=1.21.0
matplotlib>=3.5.0
Pillow>=8.3.0
scikit-learn>=1.0.0
pandas>=1.3.0
seaborn>=0.11.0
numba>=0.56.0
psutil>=5.8.0
argparse
"""
    with open('requirements.txt', 'w') as f:
        f.write(requirements)
    print("‚úÖ –§–∞–π–ª requirements.txt —Å–æ–∑–¥–∞–Ω")

def create_test_image():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        from PIL import Image, ImageDraw
        
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç—Ä–µ–º—è —Ü–≤–µ—Ç–Ω—ã–º–∏ –∫—Ä—É–≥–∞–º–∏
        img = Image.new('RGB', (300, 300), color='white')
        draw = ImageDraw.Draw(img)
        
        # –†–∏—Å—É–µ–º –∫—Ä—É–≥–∏ —Ä–∞–∑–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
        draw.ellipse([50, 50, 150, 150], fill=(255, 0, 0))    # –ö—Ä–∞—Å–Ω—ã–π
        draw.ellipse([100, 100, 200, 200], fill=(0, 0, 255))  # –°–∏–Ω–∏–π
        draw.ellipse([150, 150, 250, 250], fill=(0, 255, 0))  # –ó–µ–ª–µ–Ω—ã–π
        
        img.save('test_image.png')
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: test_image.png")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return False

def create_gradient_clustering_module():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è (–∑–∞–≥–ª—É—à–∫–∞ - –Ω—É–∂–Ω–æ –≤—Ä—É—á–Ω—É—é —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥)"""
    stub_code = '''#!/usr/bin/env python3
"""
–í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞!
–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—é–¥–∞ –ø–æ–ª–Ω—ã–π –∫–æ–¥ –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ gradient_clustering.py
"""

print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è!")
print("üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ 'gradient_clustering.py' –≤ —ç—Ç–æ—Ç —Ñ–∞–π–ª")
'''
    
    if not os.path.exists('gradient_clustering.py'):
        with open('gradient_clustering.py', 'w') as f:
            f.write(stub_code)
        print("‚ö†Ô∏è  –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª-–∑–∞–≥–ª—É—à–∫–∞ gradient_clustering.py")
        print("üìã –í–ê–ñ–ù–û: –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤ –Ω–µ–≥–æ –∫–æ–¥ –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞!")
        return False
    return True

def create_demo_module():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è (–∑–∞–≥–ª—É—à–∫–∞)"""
    stub_code = '''#!/usr/bin/env python3
"""
–í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞!
–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—é–¥–∞ –∫–æ–¥ demo.py –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
"""

print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è!")
print("üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ 'demo.py'")
'''
    
    if not os.path.exists('demo.py'):
        with open('demo.py', 'w') as f:
            f.write(stub_code)
        print("‚ö†Ô∏è  –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª-–∑–∞–≥–ª—É—à–∫–∞ demo.py")
        return False
    return True

def test_installation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    test_code = """
import sys
try:
    import numpy as np
    import matplotlib.pyplot as plt
    from PIL import Image
    from sklearn.cluster import KMeans
    import pandas as pd
    import seaborn as sns
    
    print("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print(f"‚úÖ Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    print(f"‚úÖ NumPy –≤–µ—Ä—Å–∏—è: {np.__version__}")
    print(f"‚úÖ Matplotlib –≤–µ—Ä—Å–∏—è: {plt.matplotlib.__version__}")
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    test_img = np.random.randint(0, 255, (50, 50, 3), dtype=np.uint8)
    Image.fromarray(test_img).save('installation_test.png')
    print("‚úÖ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
    
    import os
    os.remove('installation_test.png')
    
    exit(0)
    
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    exit(1)
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    exit(1)
"""
    
    try:
        exec(test_code)
        return True
    except SystemExit as e:
        return e.code == 0

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print("üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê –ü–†–û–ï–ö–¢–ê –ö–õ–ê–°–¢–ï–†–ò–ó–ê–¶–ò–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
    print("=" * 60)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –≤–µ—Ä—Å–∏–∏
    if sys.version_info < (3, 7):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.7 –∏–ª–∏ –≤—ã—à–µ!")
        print(f"   –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {sys.version}")
        return False
    
    print(f"‚úÖ Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    
    # 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
    print("\nüìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞...")
    create_requirements()
    create_gradient_clustering_module()
    create_demo_module()
    
    # 3. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    print("\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    if not run_command(f"{sys.executable} -m pip install --upgrade pip", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip"):
        print("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å pip")
    
    if not run_command(f"{sys.executable} -m pip install -r requirements.txt", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"):
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏!")
        print("üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é:")
        print("   pip install --user -r requirements.txt")
        return False
    
    # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    if test_installation():
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏!")
        return False
    
    # 5. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    print("\nüé® –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    create_test_image()
    
    # 6. –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    os.makedirs('experiment_results', exist_ok=True)
    print("‚úÖ –ü–∞–ø–∫–∞ experiment_results —Å–æ–∑–¥–∞–Ω–∞")
    
    # 7. –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    instructions = """
# üéì –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ

## ‚ö†Ô∏è –í–ê–ñ–ù–û: –ó–∞–≤–µ—Ä—à–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É!

1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ 'gradient_clustering.py' –≤ —Ñ–∞–π–ª gradient_clustering.py
2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ 'demo.py' –≤ —Ñ–∞–π–ª demo.py
3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ 'experiment_analysis.py' –≤ —Ñ–∞–π–ª experiment_analysis.py

## üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:

```bash
# –ë–∞–∑–æ–≤–∞—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
python gradient_clustering.py test_image.png

# –° –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
python gradient_clustering.py test_image.png --clusters 5 --compare_kmeans

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
python demo.py
```

## üìû –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º:

–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: pip install -r requirements.txt
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ—Ä—Å–∏—é Python: –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 3.7+
"""
    
    with open('INSTRUCTIONS.md', 'w', encoding='utf-8') as f:
        f.write(instructions)
    
    print("\nüéâ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("=" * 40)
    print("‚úÖ –§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ–∑–¥–∞–Ω—ã")
    print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã") 
    print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
    print("‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ INSTRUCTIONS.md")
    
    print("\n‚ö†Ô∏è  –í–ê–ñ–ù–û: –ó–∞–≤–µ—Ä—à–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É!")
    print("1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ Claude –≤ —Ñ–∞–π–ª—ã:")
    print("   - gradient_clustering.py")  
    print("   - demo.py")
    print("   - experiment_analysis.py")
    
    print("\nüöÄ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å:")
    print("   python gradient_clustering.py test_image.png")
    
    return True

if __name__ == "__main__":
    success = main()
    if not success:
        sys.exit(1)
